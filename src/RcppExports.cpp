// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// lower_b
double lower_b(double a);
RcppExport SEXP _tmvn_lower_b(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(lower_b(a));
    return rcpp_result_gen;
END_RCPP
}
// lower_b1
double lower_b1(double a);
RcppExport SEXP _tmvn_lower_b1(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(lower_b1(a));
    return rcpp_result_gen;
END_RCPP
}
// lower_b2
double lower_b2(double a);
RcppExport SEXP _tmvn_lower_b2(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(lower_b2(a));
    return rcpp_result_gen;
END_RCPP
}
// rtmvn_gibbs
arma::mat rtmvn_gibbs(int n, int p, arma::vec Mean, arma::mat Sigma_chol, arma::mat R, arma::vec a, arma::vec b, arma::vec z);
RcppExport SEXP _tmvn_rtmvn_gibbs(SEXP nSEXP, SEXP pSEXP, SEXP MeanSEXP, SEXP Sigma_cholSEXP, SEXP RSEXP, SEXP aSEXP, SEXP bSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Mean(MeanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma_chol(Sigma_cholSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(rtmvn_gibbs(n, p, Mean, Sigma_chol, R, a, b, z));
    return rcpp_result_gen;
END_RCPP
}
// rtuvn
arma::vec rtuvn(int n, double mean, double sd, double lower, double upper);
RcppExport SEXP _tmvn_rtuvn(SEXP nSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(rtuvn(n, mean, sd, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
// sample_case1
double sample_case1(double a, double b);
RcppExport SEXP _tmvn_sample_case1(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_case1(a, b));
    return rcpp_result_gen;
END_RCPP
}
// sample_case2
double sample_case2(double a, double b);
RcppExport SEXP _tmvn_sample_case2(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_case2(a, b));
    return rcpp_result_gen;
END_RCPP
}
// sample_case3
double sample_case3(double a, double b);
RcppExport SEXP _tmvn_sample_case3(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_case3(a, b));
    return rcpp_result_gen;
END_RCPP
}
// sample_case4
double sample_case4(double a, double b);
RcppExport SEXP _tmvn_sample_case4(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_case4(a, b));
    return rcpp_result_gen;
END_RCPP
}
// sample_case5
double sample_case5(double a, double b);
RcppExport SEXP _tmvn_sample_case5(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_case5(a, b));
    return rcpp_result_gen;
END_RCPP
}
// sample_tuvsn
double sample_tuvsn(double a, double b);
RcppExport SEXP _tmvn_sample_tuvsn(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_tuvsn(a, b));
    return rcpp_result_gen;
END_RCPP
}
// norm_rej
double norm_rej(double a, double b);
RcppExport SEXP _tmvn_norm_rej(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(norm_rej(a, b));
    return rcpp_result_gen;
END_RCPP
}
// halfnorm_rej
double halfnorm_rej(double a, double b);
RcppExport SEXP _tmvn_halfnorm_rej(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(halfnorm_rej(a, b));
    return rcpp_result_gen;
END_RCPP
}
// unif_rej
double unif_rej(double a, double b);
RcppExport SEXP _tmvn_unif_rej(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(unif_rej(a, b));
    return rcpp_result_gen;
END_RCPP
}
// exp_rej
double exp_rej(double a, double b);
RcppExport SEXP _tmvn_exp_rej(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(exp_rej(a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tmvn_lower_b", (DL_FUNC) &_tmvn_lower_b, 1},
    {"_tmvn_lower_b1", (DL_FUNC) &_tmvn_lower_b1, 1},
    {"_tmvn_lower_b2", (DL_FUNC) &_tmvn_lower_b2, 1},
    {"_tmvn_rtmvn_gibbs", (DL_FUNC) &_tmvn_rtmvn_gibbs, 8},
    {"_tmvn_rtuvn", (DL_FUNC) &_tmvn_rtuvn, 5},
    {"_tmvn_sample_case1", (DL_FUNC) &_tmvn_sample_case1, 2},
    {"_tmvn_sample_case2", (DL_FUNC) &_tmvn_sample_case2, 2},
    {"_tmvn_sample_case3", (DL_FUNC) &_tmvn_sample_case3, 2},
    {"_tmvn_sample_case4", (DL_FUNC) &_tmvn_sample_case4, 2},
    {"_tmvn_sample_case5", (DL_FUNC) &_tmvn_sample_case5, 2},
    {"_tmvn_sample_tuvsn", (DL_FUNC) &_tmvn_sample_tuvsn, 2},
    {"_tmvn_norm_rej", (DL_FUNC) &_tmvn_norm_rej, 2},
    {"_tmvn_halfnorm_rej", (DL_FUNC) &_tmvn_halfnorm_rej, 2},
    {"_tmvn_unif_rej", (DL_FUNC) &_tmvn_unif_rej, 2},
    {"_tmvn_exp_rej", (DL_FUNC) &_tmvn_exp_rej, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_tmvn(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
